-- p1 & p2: Schema and Data Insertion

CREATE SCHEMA IF NOT EXISTS pandemic;

USE pandemic;

-- Create entities table
CREATE TABLE entities (
    entity_id SERIAL PRIMARY KEY,
    entity_name VARCHAR(255) UNIQUE,
    entity_code VARCHAR(10) UNIQUE
);

-- Populate entities table with unique Entity and Code combinations
INSERT INTO entities (entity_name, entity_code)
SELECT DISTINCT Entity, Code
FROM infectious_cases;

-- Create cases table with foreign key to entities
CREATE TABLE cases (
    case_id SERIAL PRIMARY KEY,
    entity_id INT,
    year INT,
    number_yaws FLOAT,
    polio_cases FLOAT,
    cases_guinea_worm FLOAT,
    number_rabies FLOAT,
    number_malaria FLOAT,
    number_hiv FLOAT,
    number_tuberculosis FLOAT,
    number_smallpox FLOAT,
    number_cholera_cases FLOAT,
    FOREIGN KEY (entity_id) REFERENCES entities(entity_id)
);

-- Populate cases table with normalized data
INSERT INTO cases (
    entity_id, year, number_yaws, polio_cases, cases_guinea_worm,
    number_rabies, number_malaria, number_hiv, number_tuberculosis,
    number_smallpox, number_cholera_cases
)
SELECT 
    e.entity_id, 
    ic.Year, 
    CAST(NULLIF(ic.Number_yaws, '') AS FLOAT), 
    CAST(NULLIF(ic.polio_cases, '') AS FLOAT), 
    CAST(NULLIF(ic.cases_guinea_worm, '') AS FLOAT),
    CAST(NULLIF(ic.Number_rabies, '') AS FLOAT), 
    CAST(NULLIF(ic.Number_malaria, '') AS FLOAT), 
    CAST(NULLIF(ic.Number_hiv, '') AS FLOAT), 
    CAST(NULLIF(ic.Number_tuberculosis, '') AS FLOAT),
    CAST(NULLIF(ic.Number_smallpox, '') AS FLOAT), 
    CAST(NULLIF(ic.Number_cholera_cases, '') AS FLOAT)
FROM infectious_cases ic
JOIN entities e ON ic.Entity = e.entity_name AND ic.Code = e.entity_code;

-- p3: Analysis of Number_rabies statistics

SELECT 
    e.entity_name,
    e.entity_code,
    AVG(dc.number_rabies) AS avg_rabies,
    MIN(dc.number_rabies) AS min_rabies,
    MAX(dc.number_rabies) AS max_rabies,
    SUM(dc.number_rabies) AS sum_rabies
FROM 
    cases dc
JOIN 
    entities e ON dc.entity_id = e.entity_id
WHERE 
    dc.number_rabies IS NOT NULL
GROUP BY 
    e.entity_name, e.entity_code
ORDER BY 
    avg_rabies DESC
LIMIT 10;

-- p4: Calculating Year Difference

SELECT 
    year,
    STR_TO_DATE(CONCAT(year, '-01-01'), '%Y-%m-%d') AS first_january,
    TIMESTAMPDIFF(YEAR, STR_TO_DATE(CONCAT(year, '-01-01'), '%Y-%m-%d'), CURDATE()) AS year_difference
FROM 
    cases;

-- p5: Creating a Custom Function to Calculate Year Difference

DELIMITER $$

CREATE FUNCTION year_difference_from_current(year_input INT)
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE first_january DATE;
    DECLARE year_difference INT;
    
    -- Create the January 1st date for the given year
    SET first_january = STR_TO_DATE(CONCAT(year_input, '-01-01'), '%Y-%m-%d');
    
    -- Calculate the difference in years between the current date and January 1st of the given year
    SET year_difference = TIMESTAMPDIFF(YEAR, first_january, CURDATE());
    
    RETURN year_difference;
END$$

DELIMITER ;
